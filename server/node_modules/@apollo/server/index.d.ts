import { GraphQLRequest } from './execution';
import { Config as BaseConfig, GraphQLOptions } from 'apollo-server-core';
export { default as gql } from 'graphql-tag';
export { GraphQLSchemaModule } from './execution';
declare type Config = Pick<BaseConfig, 'modules' | 'resolvers' | 'dataSources' | 'parseOptions' | 'context' | 'introspection' | 'schemaDirectives' | 'cacheControl' | 'plugins'>;
export declare class ApolloServer {
    private readonly config;
    private userContext?;
    private plugins;
    private schemaDerivedData;
    private toDispose;
    constructor(config: Config);
    private generateSchemaDerivedData;
    protected willStart(): Promise<void>;
    stop(): Promise<void>;
    private ensurePluginInstantiation;
    private initializeDocumentStore;
    protected graphQLServerOptions(integrationContextArgument?: Record<string, any>): Promise<GraphQLOptions<Record<string, any>, any>>;
    executeOperation(request: GraphQLRequest): Promise<import("apollo-server-types").GraphQLResponse>;
}
//# sourceMappingURL=index.d.ts.map