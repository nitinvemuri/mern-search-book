{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nitin\\\\Desktop\\\\solid-broccoli-main\\\\solid-broccoli-main\\\\Develop\\\\client\\\\src\\\\pages\\\\SavedBooks.js\",\n    _s = $RefreshSig$();\n\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\nimport Auth from '../utils/auth';\nimport { removeBookId } from '../utils/localStorage';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { GET_ME } from '../utils/queries';\nimport { REMOVE_BOOK } from '../utils/mutations';\nimport React from 'react';\n\nconst SavedBooks = () => {\n  _s();\n\n  const {\n    loading,\n    data\n  } = useQuery(GET_ME);\n  const [removeBook, {\n    error\n  }] = useMutation(REMOVE_BOOK);\n  const userData = (data === null || data === void 0 ? void 0 : data.me) || [];\n  console.log(userData); // create function that accepts the book's mongo _id value as param and deletes the book from the database\n\n  const handleDeleteBook = async bookId => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      await removeB({\n        variables: {\n          bookId: bookId\n        },\n        update: cache => {\n          const data = cache.readQuery({\n            query: GET_ME\n          });\n          const userDataCache = data.me;\n          const savedBooksCache = userDataCache.savedBooks;\n          const updatedBookCache = savedBooksCache.filter(book => book.bookId !== bookId);\n          data.me.savedBooks = updatedBookCache;\n          cache.writeQuery({\n            query: GET_ME,\n            data: {\n              data: { ...data.me.savedBooks\n              }\n            }\n          });\n        }\n      });\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  }; // if data isn't here yet, say so\n\n\n  if (!loading) {\n    return /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 12\n      }\n    }, \"LOADING...\");\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Jumbotron, {\n    fluid: true,\n    className: \"text-light bg-dark\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }\n  }, \"Viewing saved books!\"))), /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, userData.savedBooks.length ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:` : 'You have no saved books!'), /*#__PURE__*/React.createElement(CardColumns, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, userData.savedBooks.map(book => {\n    return /*#__PURE__*/React.createElement(Card, {\n      key: book.bookId,\n      border: \"dark\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 15\n      }\n    }, book.image ? /*#__PURE__*/React.createElement(Card.Img, {\n      src: book.image,\n      alt: `The cover for ${book.title}`,\n      variant: \"top\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 31\n      }\n    }) : null, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 19\n      }\n    }, book.title), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 19\n      }\n    }, \"Authors: \", book.authors), /*#__PURE__*/React.createElement(Card.Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 19\n      }\n    }, book.description), /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-block btn-danger\",\n      onClick: () => handleDeleteBook(book.bookId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 19\n      }\n    }, \"Delete this Book!\")));\n  }))));\n};\n\n_s(SavedBooks, \"uNPI9WsNcexPvQEe352ymc99pbY=\", false, function () {\n  return [useQuery, useMutation];\n});\n\n_c = SavedBooks;\nexport default SavedBooks;\n\nvar _c;\n\n$RefreshReg$(_c, \"SavedBooks\");","map":{"version":3,"sources":["C:/Users/nitin/Desktop/solid-broccoli-main/solid-broccoli-main/Develop/client/src/pages/SavedBooks.js"],"names":["Jumbotron","Container","CardColumns","Card","Button","Auth","removeBookId","useMutation","useQuery","GET_ME","REMOVE_BOOK","React","SavedBooks","loading","data","removeBook","error","userData","me","console","log","handleDeleteBook","bookId","token","loggedIn","getToken","removeB","variables","update","cache","readQuery","query","userDataCache","savedBooksCache","savedBooks","updatedBookCache","filter","book","writeQuery","err","length","map","image","title","authors","description"],"mappings":"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","sourcesContent":["import { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\nimport Auth from '../utils/auth';\nimport { removeBookId } from '../utils/localStorage';\nimport { useMutation, useQuery } from '@apollo/react-hooks'\n\nimport { GET_ME } from '../utils/queries';\nimport { REMOVE_BOOK} from '../utils/mutations';\nimport React from 'react';\n\n\nconst SavedBooks = () => {\n  const {loading, data} = useQuery(GET_ME)\n\n  const [removeBook, {error}] = useMutation(REMOVE_BOOK);\n\n  const userData = data?.me || [];\n  console.log(userData)\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteBook = async (bookId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n    try {\n      await removeB({\n        variables: {bookId: bookId},\n        update: cache => {\n          const data = cache.readQuery({ query: GET_ME });\n          const userDataCache = data.me;\n          const savedBooksCache = userDataCache.savedBooks;\n          const updatedBookCache = savedBooksCache.filter((book) => book.bookId !== bookId);\n          data.me.savedBooks = updatedBookCache;\n          cache.writeQuery({ query: GET_ME , data: {data: {...data.me.savedBooks}}})\n        }\n      });\n\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // if data isn't here yet, say so\n  if (!loading) {\n    return <h2>LOADING...</h2>;\n  }\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\n            : 'You have no saved books!'}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n     \n    </>\n  );\n};\n\nexport default SavedBooks;\n"]},"metadata":{},"sourceType":"module"}