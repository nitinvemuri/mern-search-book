{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nitin\\\\Desktop\\\\solid-broccoli-main\\\\solid-broccoli-main\\\\Develop\\\\client\\\\src\\\\pages\\\\SavedBooks.js\",\n    _s = $RefreshSig$();\n\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\nimport Auth from '../utils/auth';\nimport { removeBookId } from '../utils/localStorage';\nimport { useMutation, useQuery } from '@apollo/client';\nimport { GET_ME } from '../utils/queries';\nimport { REMOVE_BOOK } from '../utils/mutations';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SavedBooks = () => {\n  _s();\n\n  const {\n    loading,\n    data\n  } = useQuery(GET_ME);\n  const [removeBook] = useMutation(REMOVE_BOOK);\n  const userData = (data === null || data === void 0 ? void 0 : data.me) || [];\n  console.log(userData); // create function that accepts the book's mongo _id value as param and deletes the book from the database\n\n  const handleDeleteBook = async bookId => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      await removeBook({\n        variables: {\n          bookId: bookId\n        },\n        update: cache => {\n          const data = cache.readQuery({\n            query: GET_ME\n          });\n          const userDataCache = data.me;\n          const savedBooksCache = userDataCache.savedBooks;\n          const updatedBookCache = savedBooksCache.filter(book => book.bookId !== bookId);\n          data.me.savedBooks = updatedBookCache;\n          cache.writeQuery({\n            query: GET_ME,\n            data: {\n              data: { ...data.me.savedBooks\n              }\n            }\n          });\n        }\n      });\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  }; // if data isn't here yet, say so\n\n\n  if (!loading) {\n    return /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"LOADING...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Jumbotron, {\n      fluid: true,\n      className: \"text-light bg-dark\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Viewing saved books!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: userData.savedBooks.length ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:` : 'You have no saved books!'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardColumns, {\n        children: userData.savedBooks.map(book => {\n          return /*#__PURE__*/_jsxDEV(Card, {\n            border: \"dark\",\n            children: [book.image ? /*#__PURE__*/_jsxDEV(Card.Img, {\n              src: book.image,\n              alt: `The cover for ${book.title}`,\n              variant: \"top\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 31\n            }, this) : null, /*#__PURE__*/_jsxDEV(Card.Body, {\n              children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n                children: book.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"small\",\n                children: [\"Authors: \", book.authors]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                children: book.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                className: \"btn-block btn-danger\",\n                onClick: () => handleDeleteBook(book.bookId),\n                children: \"Delete this Book!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 17\n            }, this)]\n          }, book.bookId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(SavedBooks, \"pUXiauyc/rSF6VmXIPnKYGTGtSg=\", false, function () {\n  return [useQuery, useMutation];\n});\n\n_c = SavedBooks;\nexport default SavedBooks;\n\nvar _c;\n\n$RefreshReg$(_c, \"SavedBooks\");","map":{"version":3,"sources":["C:/Users/nitin/Desktop/solid-broccoli-main/solid-broccoli-main/Develop/client/src/pages/SavedBooks.js"],"names":["Jumbotron","Container","CardColumns","Card","Button","Auth","removeBookId","useMutation","useQuery","GET_ME","REMOVE_BOOK","React","SavedBooks","loading","data","removeBook","userData","me","console","log","handleDeleteBook","bookId","token","loggedIn","getToken","variables","update","cache","readQuery","query","userDataCache","savedBooksCache","savedBooks","updatedBookCache","filter","book","writeQuery","err","error","length","map","image","title","authors","description"],"mappings":"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","sourcesContent":["import { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\nimport Auth from '../utils/auth';\nimport { removeBookId } from '../utils/localStorage';\nimport { useMutation, useQuery } from '@apollo/client'\n\nimport { GET_ME } from '../utils/queries';\nimport { REMOVE_BOOK} from '../utils/mutations';\nimport React from 'react';\n\n\nconst SavedBooks = () => {\n  const {loading, data} = useQuery(GET_ME)\n\n  const [removeBook] = useMutation(REMOVE_BOOK);\n\n  const userData = data?.me || [];\n  console.log(userData)\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteBook = async (bookId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n    try {\n      await removeBook({\n        variables: {bookId: bookId},\n        update: cache => {\n          const data = cache.readQuery({ query: GET_ME });\n          const userDataCache = data.me;\n          const savedBooksCache = userDataCache.savedBooks;\n          const updatedBookCache = savedBooksCache.filter((book) => book.bookId !== bookId);\n          data.me.savedBooks = updatedBookCache;\n          cache.writeQuery({ query: GET_ME , data: {data: {...data.me.savedBooks}}})\n        }\n      });\n\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // if data isn't here yet, say so\n  if (!loading) {\n    return <h2>LOADING...</h2>;\n  }\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\n            : 'You have no saved books!'}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n     \n    </>\n  );\n};\n\nexport default SavedBooks;\n"]},"metadata":{},"sourceType":"module"}